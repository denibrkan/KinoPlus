// <auto-generated />
using System;
using KinoPlus.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KinoPlus.Services.Migrations
{
    [DbContext(typeof(KinoplusContext))]
    partial class KinoplusContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KinoPlus.Services.Database.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDisplayed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_City_CountryId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Hall", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("OriginalContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ThumbnailContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Location_CityId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.LocationHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HallId" }, "IX_LocationHall_HallId");

                    b.HasIndex(new[] { "LocationId" }, "IX_LocationHall_LocationId");

                    b.ToTable("LocationHall", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.LocationProjectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LocationId", "ProjectionTypeId" }, "IX_LocationProjectionType")
                        .IsUnique();

                    b.HasIndex(new[] { "ProjectionTypeId" }, "IX_LocationProjectionType_ProjectionTypeId");

                    b.ToTable("LocationProjectionType", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovieStatusId")
                        .HasColumnType("int");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TrailerUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImageId" }, "IX_Movie_ImageId");

                    b.HasIndex(new[] { "MovieStatusId" }, "IX_Movie_MovieStatusId");

                    b.HasIndex(new[] { "YearId" }, "IX_Movie_YearId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActorId" }, "IX_MovieActor_ActorId");

                    b.HasIndex(new[] { "MovieId" }, "IX_MovieActor_MovieId");

                    b.ToTable("MovieActor", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_MovieCategory_CategoryId");

                    b.HasIndex(new[] { "MovieId" }, "IX_MovieCategory_MovieId");

                    b.ToTable("MovieCategory", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GenreId" }, "IX_MovieGenre_GenreId");

                    b.HasIndex(new[] { "MovieId" }, "IX_MovieGenre_MovieId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MovieId" }, "IX_MovieReaction_MovieId");

                    b.HasIndex(new[] { "UserId" }, "IX_MovieReaction_UserId");

                    b.ToTable("MovieReaction", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MovieStatus", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Projection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int>("ProjectionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RecurringProjectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HallId" }, "IX_Projection_HallId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Projection_LocationId");

                    b.HasIndex(new[] { "MovieId" }, "IX_Projection_MovieId");

                    b.HasIndex(new[] { "ProjectionTypeId" }, "IX_Projection_ProjectionTypeId");

                    b.HasIndex(new[] { "RecurringProjectionId" }, "IX_Projection_RecurringProjectionId");

                    b.ToTable("Projection", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.ProjectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProjectionType", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.RecurringProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("ProjectionTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("date");

                    b.Property<int>("WeekDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WeekDayId" }, "IX_RecurringProjection_WeekDayId");

                    b.ToTable("RecurringProjection", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime");

                    b.Property<int>("ProjectionId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProjectionId" }, "IX_Ticket_ProjectionId");

                    b.HasIndex(new[] { "SeatId" }, "IX_Ticket_SeatId");

                    b.HasIndex(new[] { "UserId" }, "IX_Ticket_UserId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImageId" }, "IX_User_ImageId");

                    b.HasIndex(new[] { "LocationId" }, "IX_User_LocationId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRole_RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_UserRole_UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("WeekDay", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Year", (string)null);
                });

            modelBuilder.Entity("KinoPlus.Services.Database.City", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_City_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Location", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.LocationHall", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Hall", "Hall")
                        .WithMany("LocationHalls")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationHall_Hall");

                    b.HasOne("KinoPlus.Services.Database.Location", "Location")
                        .WithMany("LocationHalls")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationHall_Location");

                    b.Navigation("Hall");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.LocationProjectionType", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Location", "Location")
                        .WithMany("LocationProjectionTypes")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationProjectionType_Location");

                    b.HasOne("KinoPlus.Services.Database.ProjectionType", "ProjectionType")
                        .WithMany("LocationProjectionTypes")
                        .HasForeignKey("ProjectionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_LocationProjectionType_ProjectionType");

                    b.Navigation("Location");

                    b.Navigation("ProjectionType");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Movie", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Image", "Image")
                        .WithMany("Movies")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Movie_Image");

                    b.HasOne("KinoPlus.Services.Database.MovieStatus", "MovieStatus")
                        .WithMany("Movies")
                        .HasForeignKey("MovieStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Movie_MovieStatus");

                    b.HasOne("KinoPlus.Services.Database.Year", "Year")
                        .WithMany("Movies")
                        .HasForeignKey("YearId")
                        .IsRequired()
                        .HasConstraintName("FK_Movie_Year");

                    b.Navigation("Image");

                    b.Navigation("MovieStatus");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieActor", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieActor_Actor");

                    b.HasOne("KinoPlus.Services.Database.Movie", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieActor_Movie");

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieCategory", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieCategory_Category");

                    b.HasOne("KinoPlus.Services.Database.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieCategory_Movie");

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieGenre", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Genre");

                    b.HasOne("KinoPlus.Services.Database.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieGenre_Movie");

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieReaction", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Movie", "Movie")
                        .WithMany("MovieReactions")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieReaction_Movie");

                    b.HasOne("KinoPlus.Services.Database.User", "User")
                        .WithMany("MovieReactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_MovieReaction_User");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Projection", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Hall", "Hall")
                        .WithMany("Projections")
                        .HasForeignKey("HallId")
                        .IsRequired()
                        .HasConstraintName("FK_Projection_Hall");

                    b.HasOne("KinoPlus.Services.Database.Location", "Location")
                        .WithMany("Projections")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Projection_Location");

                    b.HasOne("KinoPlus.Services.Database.Movie", "Movie")
                        .WithMany("Projections")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Projection_Movie");

                    b.HasOne("KinoPlus.Services.Database.ProjectionType", "ProjectionType")
                        .WithMany("Projections")
                        .HasForeignKey("ProjectionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Projection_ProjectionType");

                    b.HasOne("KinoPlus.Services.Database.RecurringProjection", "RecurringProjection")
                        .WithMany("Projections")
                        .HasForeignKey("RecurringProjectionId")
                        .HasConstraintName("FK_Projection_RecurringProjection");

                    b.Navigation("Hall");

                    b.Navigation("Location");

                    b.Navigation("Movie");

                    b.Navigation("ProjectionType");

                    b.Navigation("RecurringProjection");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.RecurringProjection", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.WeekDay", "WeekDay")
                        .WithMany("RecurringProjections")
                        .HasForeignKey("WeekDayId")
                        .IsRequired()
                        .HasConstraintName("FK_RecurringProjection_WeekDay");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Ticket", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Projection", "Projection")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Projection");

                    b.HasOne("KinoPlus.Services.Database.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Seat");

                    b.HasOne("KinoPlus.Services.Database.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_User");

                    b.Navigation("Projection");

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.User", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_User_Image");

                    b.HasOne("KinoPlus.Services.Database.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_User_Location");

                    b.Navigation("Image");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.UserRole", b =>
                {
                    b.HasOne("KinoPlus.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("KinoPlus.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Actor", b =>
                {
                    b.Navigation("MovieActors");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Category", b =>
                {
                    b.Navigation("MovieCategories");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.City", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Hall", b =>
                {
                    b.Navigation("LocationHalls");

                    b.Navigation("Projections");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Image", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Location", b =>
                {
                    b.Navigation("LocationHalls");

                    b.Navigation("LocationProjectionTypes");

                    b.Navigation("Projections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("MovieCategories");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieReactions");

                    b.Navigation("Projections");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.MovieStatus", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Projection", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.ProjectionType", b =>
                {
                    b.Navigation("LocationProjectionTypes");

                    b.Navigation("Projections");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.RecurringProjection", b =>
                {
                    b.Navigation("Projections");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.User", b =>
                {
                    b.Navigation("MovieReactions");

                    b.Navigation("Tickets");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.WeekDay", b =>
                {
                    b.Navigation("RecurringProjections");
                });

            modelBuilder.Entity("KinoPlus.Services.Database.Year", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
